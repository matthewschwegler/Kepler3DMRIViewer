<html>
<head>
<!-- $Id: demos.htm 24234 2010-05-06 05:21:26Z welker $ -->
<!--

demosPtiny.htm is derived from this file by including
anything between the tags vergilDoc and /vergilDoc.
The vergilDoc tags are used by $PTII/doc/javahtml.awk
to generate demosPtiny.htm.


-->
</head>
<body>
<!--vergilDocs-->
<h1>
Quick Tour
</h1>

<!--
Note:  demos should go with in the directory of their respective
domains. Demo xml files should usually be upper case, and have the
same name as the directory they reside in; so we should
have sdf/demo/Foo/Foo.xml.
The reason that the xml files are upcased is so that if
we do codegen, we get Foo.java instead of foo.java
-->

The following links open models that highlight the
key features of Ptolemy II. To run the models,
follow the link, then select "Run Window" from the "View" menu. The
diagrams are fully editable, so feel free to explore. The top-level
parameters are the model are shown in the run window. Edit these to
explore the models. They can be edited while the models are running.
You can also access the <a href="completeDemos.htm">complete
list of demos</a>.

<ul>
<li><a href="../../domains/sdf/demo/Spectrum/Spectrum.xml">
Simple Signal Processing</a> (See also
<a href="../../domains/sdf/demo/MaximumEntropySpectrum/MaximumEntropySpectrum.xml">Maximum Entropy Spectrum</a>,
<a href="../../domains/sdf/demo/FourierSeries/FourierSeries.xml">Fourier Series</a>, and
<a href="../../domains/sdf/demo/SoundSpectrum/SoundSpectrum.xml">Sound Spectrum</a>)
<br> This example shows simple spectral estimation of the product
of two sinusoids in noise.  It illustrates models for signal
processing, hierarchical models,
the Expression actor, and the FFT actor.
This model is build using the <i>synchronous dataflow</i> (SDF) domain,
which statically schedules the firing of the actors.
<br>
</li>

<li><a href="../../domains/ct/demo/Lorenz/Lorenz.xml">
Continuous-Time Modeling</a> (see also
<a href="../../domains/ct/demo/SquareWave/SquareWave.xml">Square Wave Response</a>)
<br> This example shows a continuous-time
nonlinear feedback system that exhibits
chaotic behavior (this system is called a Lorenz attractor).
It illustrates the <i>continuous-time</i> (CT) domain,
which uses an underlying solver for ordinary differential equations.
</li>

<li><a href="../../domains/de/demo/Inspection/Inspection.xml">
Discrete-Event Modeling</a> (see also
<a href="../../data/type/demo/Router/Router.xml">Router</a>
and <a href="../../domains/de/demo/TimingParadox/TimingParadox.xml">
Timing Paradox</a>).
<br> This example shows
a famous paradox in probability called the inspection paradox.
It illustrates use of the <i>discrete-event</i> (DE) domain, where
events occur on a time line and are processed chronologically.
In this example, random
data stimulates a model and statistics are collected and reported
in various ways.
</li>

<li> <a href="../../domains/ct/demo/SigmaDelta/SigmaDelta.xml">
Mixed-Signal Modeling</a> (see also
<a href="../../domains/ct/demo/Switch/Switch.xml">Switching Continuous</a>)
<br> This example shows how to combine continuous-time modeling
with discrete-event modeling to get mixed-signal modeling.
The example models a MEMS accelerometer where a digital circuit
implements feedback control and A/D conversion (a design due to
Mark Lemkin).

<li> <a href="../../domains/de/demo/ModalModel/ModalModel.xml">
Modal Models</a>
<br>A modal model is one whose behavior depends on its "mode"
of operation. A modal model in Ptolemy II uses the
<i>finite state machine</i> (FSM) domain
combined hierarchically with other models. A state in the FSM represents
a mode of operation, and can have a refinement that gives the behavior
in that mode.
The refinement can be another FSM or some other model using some other
Ptolemy domain. This example combines DE, FSM, and SDF to model a
system where regularly sampled signals are perturbed by irregular
events in time.
</li>

<li><a href="../../domains/ct/demo/StickyMasses/StickyMasses.xml">
Hybrid Systems</a> (see also
<a href="../../domains/ct/demo/CarTracking/CarTracking.xml">Car Tracking</a>
<!--/vergilDocs-->
<!-- Ptiny does not include GR -->
,
and <a href="../../domains/ct/demo/BouncingBall/BouncingBall.xml">Bouncing Ball</a> and
<a href="../../domains/gr/demo/FurutaPendulum/FurutaPendulum.xml">Furuta Pendulum</a>
<!--vergilDocs-->
).
<br> <i>Hybrid systems</i> are a special case of modal models
where the FSM domain is combined with the CT domain
to get mixed continuous-time and discrete-event models.
This example models a physical system consisting of two point masses
on springs that stick together when they collide.
</li>

<li><a href="../../domains/pn/demo/OrderedMerge/OrderedMerge.xml">
Process Networks</a> (see also
<a href="../../domains/pn/demo/QR/QR.xml">QR</a>).<br>
This example illustrates the <i>process networks</i> (PN) domain,
where each actor executes in a separate Ptolemy II thread.
The example calculates numbers whose prime
factors are 2, 3, and 5, only, and produces
them in an ordered sequence.)
<br>
</li>

<!--/vergilDocs-->
<!-- Ptiny does not include SR -->
<li><a href="../../domains/sr/demo/TokenRing/TokenRing.xml">
Synchronous/Reactive Modeling</a>.<br>
This example illustrates the <i>synchronous/reactive</i> (SR) domain,
which is inspired by the synchronous languages Esterel, Lustre, and Signal.
The example uses the fixed-point semantics of SR to arbitrate access
to a shared medium using a token-ring protocol.
</li>
<!--vergilDocs-->
<li><a href="../../data/type/demo/Router/Router.xml">
The Type System</a>.
<br>
This model illustrates the very sophisticated type system
of Ptolemy II, where type constraints propagate transparently,
actors are polymorphic, and composite types such as records and
arrays are supported.
This example illustrates composite types, where records are
constructed out of tokens with various types. Here, a record
models a packet in a packet-switched network, where variable
delays may result in out-of-order arrival of packets.
</li>

<li><a href="../../domains/ct/demo/Transmission/Transmission.xml">
Higher-order expressions</a>.
<br>

To simplify creating new components, Ptolemy II contains a functional
expression language.  The expression language is integrated with the
type system, allowing static type checking of polymorphic expressions
with few type annotations.  The expression language also allows new,
encapsulated functions, called function closures, to be defined and
passed as data.  This model illustrates how function closures can be
used to make model much more compact. </li>

<li><a href="../../domains/sdf/demo/Sketch/Sketch.xml">Sketched Signal</a>
(see also <a href="../../domains/sdf/demo/FourierSeries/FourierSeries.xml">Fourier Series</a>).
<br>
This model illustrates the use of plotter to provide input
as well as rendering output from a model.  Right click and drag
on the plot to trace out a new signal. The model runs each time you
do this.

<li><a href="../../matlab/demo/MatlabExpression/MatlabExpression.xml">
Matlab Integration</a> (see also
<a href="../../matlab/demo/MatlabCT/MatlabCT.xml">Matlab in CT</a>).
<br>
This example uses the Matlab interface created by
Zoltan Kemenczy and Sean Simmons, of Research in Motion Ltd.,
to plot a 3-D surface. This works only if Matlab is installed locally.

<li><a href="../../actor/parameters/demo/SliderParameter/SliderParameter.xml">Interactive
User Interface</a>  (see also
<a href="../../actor/parameters/demo/Bouncer/Bouncer.xml">Bouncer</a>).
<br>
This model illustrates features of the user interface that
make it easier to create models that execute with rich interaction
with the user.  In this example, sliders in the run control parameter
control the values of "port parameters," which in turn control the
execution of a model.

<li>
<a href="../../data/unit/demo/Units/Units.xml">
Unit Systems</a>
<br>
This model illustrates the use of Ptolemy II unit systems. A unit system
defines a set of interrelated dimensions and measures. For example, in
the time dimension, we might have seconds, minutes, hours, days, weeks,
and fortnights. The Ptolemy II unit system allows us to express
quantities equivalently with different units, and keeps track of the
units through mathematical operations. For example, one centimeter
divided by one millisecond is equal to 10 meters/second. This is
expressed in the expression language as "1*cm/ms" or "10 m/second",
where "cm", "ms", "m", and "second" are defined in the unit system. A
unit system is a modular component that one drags into a model.
</li>

<li><a href="../../moml/demo/Networked/Networked.xml">
Network Integration</a>.<br>
This example illustrates that models may be defined in a networked,
distributed fashion.
This model contains a component that is defined on the Ptolemy project
website.  When you open the model, you will be alerted to the fact
that it requires loading a model definition from a remote source.
If you agree to proceed, then you will have a model with a remotely
defined component.  The component itself is at
<a href="http://ptolemy.eecs.berkeley.edu/xml/models/Waveform.xml">
http://ptolemy.eecs.berkeley.edu/xml/models/Waveform.xml</a>.
You can open that definition by clicking on the hyperlink, or by
using the "Open URL" command in the File menu.
</li>

<li><a href="../../actor/lib/javasound/demo/KarplusStrong/KarplusStrong.xml">
Audio</a> (see also <a href="../../domains/sdf/demo/FourierSeries/FourierSeries.xml">Fourier Series</a>).
<br>
This example shows the Karplus-Strong algorithm, which synthesizes
a musical sound that closely resembles a plucked string instrument.
It illustrates the audio capabilities of Ptolemy II.
</li>

</ul>

<!--/vergilDocs-->

<!--vergilDocs-->
<!--/vergilDocs-->
<h1>Experimental Facilities</h1>
<p>
Ptolemy II has a number of less well-developed experimental
capabilities that may continue to evolve over time.
These are illustrated in the following examples.

<ul>
<!--hoc does not get included in demosPtiny.htm -->
<li><a href="../../actor/hoc/demo/HocDE/HocDE.xml">Higher-Order Components</a>.
<br>Higher-order components are components that operate on components.
This example contains a component that is a composite actor that
replicates itself some specified number of times to operate on
multiple channels of input.  This capability was created by
Zoltan Kemenczy and Sean Simmons, Research In Motion, Ltd.


<!--ci does not get included in demosPtiny.htm -->

<li> <a href="../../domains/ci/demo/Router/Router.xml">Push/Pull
Component Interaction</a>.
<br>
The CI (component interaction) domain models communication between
components that uses a combination of push and pull. This model
illustrates the use of these styles of communication to route packets
through queues using some policy that depends on the queue sizes.

<!--python does not get included in demosPtiny.htm -->
<li><a href="../../actor/lib/python/demo/PythonScale/PythonScale.xml">Python Integration</a>
<br>This example shows a trivial implementation of the Scale actor
using the Python language.  The advantage of using Python
is that Python is an interpreted language, so changes
to the actor body can be made on the fly without restarting
Ptolemy II.  New users may find it easier to prototype
actors in Python and then reimplement them as necessary
as standard Ptolemy II actors.


<!--caltrop does not get included in demosPtiny.htm -->
<li>Cal: a textual notation for writing dataflow actors.
<ul>
<li> Demonstrations:
<a href="../../cal/demo/FunctionClosures/FunctionClosures.xml">Function Closures</a>,
<a href="../../cal/demo/FunctionDefinition/FunctionDefinition.xml">Function Definition</a>,
<a href="../../cal/demo/Primes/Primes.xml">Primes</a>,
<a href="../../cal/demo/SDFDDI/SDFDDI.xml">SDFDDI</a>
<li> Documentation: <a href="http://www.gigascale.org/caltrop/docs/LanguageReport/#in_browser"  target="_top">Cal Language Report (Website version)</a>
</ul>


<!--dt does not get included in demosPtiny.htm -->
<li><a href="../../domains/dt/demo/Eye/Eye.xml">
Discrete-Time Models</a>.
<br> This example shows a simple pulse-amplitude modulation, physical
layer communication system.  It illustrates the <i>discrete-time</i> (DT)
domain, live parameter editing and
the scope-style plotter (which shows an eye diagram).
Note that discrete-time models can also be represented using the
SDF domain, which is not explicit about the passage of time.
</li>

<!-- codegen does not get shipped with ptiny -->
<li> <a href="../../../doc/codegen.htm">
Code Generation</a>
<br>
This release includes a limited prototype of our code generation facility
that will generate .class files for non-hierarchical SDF models.
This example leads to more information about this capability.
</li>

<!--Ptiny does not include the GR domain-->
<li><a href="../../domains/gr/demo/Pendulum/Pendulum.xml">
Three-Dimensional Graphics</a> (see also
<a href="../../domains/gr/demo/Universe/Universe.xml">Universe</a>,
<a href="../../domains/gr/demo/StickyMasses/StickyMasses.xml">Sticky Masses</a>)
and <a href="../../domains/ct/demo/BouncingBall/BouncingBall.xml">Bouncing Ball</a>).
<br>
<font color="red">NOTE: This model requires that you have
installed Java 3D from Sun
(see http://java.sun.com/products/java-media/3D/).</font>
This example shows a continuous-time physical model of pendulum
animated in the <i>graphics</i> (GR) domain, in which graphical components
can be assembled and dynamically manipulated.  Note that clicking
and dragging in the graphics window rotates the model.
For further details, see the
<a href="../../domains/gr/doc/main.htm">GR domain</a>.
</li>

<!--tm does not get included in demosPtiny.htm -->
<li><a href="../../domains/tm/demo/Controllers/Controllers.xml">
Timed Multitasking</a>.<br>
This example illustrates the <i>timed multitasking</i> (TM) domain,
which is inspired by the Giotto language, and has features of
priority-driven real-time operating systems. In this example,
two control systems share a computational resource. Depending
on the scheduling strategy chosen (preemptive or nonpreemptive)
and the priorities, the two control systems may be both stable,
or one may be stable, or the other may be stable.
</li>
</ul>

</body>
</html>
<!--vergilDocs-->