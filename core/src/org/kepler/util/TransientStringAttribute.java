/*
 * Copyright (c) 2010 The Regents of the University of California.
 * All rights reserved.
 *
 * 
 * Permission is hereby granted, without written agreement and without
 * license or royalty fees, to use, copy, modify, and distribute this
 * software and its documentation for any purpose, provided that the above
 * copyright notice and the following two paragraphs appear in all copies
 * of this software.
 *
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
 * FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
 * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
 * THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
 * PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
 * CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
 * ENHANCEMENTS, OR MODIFICATIONS.
 *
 */

package org.kepler.util;

import java.io.IOException;
import java.io.Writer;

import ptolemy.kernel.util.IllegalActionException;
import ptolemy.kernel.util.NameDuplicationException;
import ptolemy.kernel.util.NamedObj;
import ptolemy.kernel.util.Settable;
import ptolemy.kernel.util.StringAttribute;
import ptolemy.kernel.util.Workspace;

/**
 * This is a string attribute that overrides the exportMoML method to
 * effectively remove it (and any children) from MoML generated by the parent
 * NamedObj.  Also, the visibility is set to NONE by default.
 * 
 * @author Aaron Schultz
 */
public class TransientStringAttribute extends StringAttribute {
	/**
	 * Construct an attribute in the default workspace with an empty string as
	 * its name. The object is added to the directory of the workspace.
	 * Increment the version number of the workspace.
	 */
	public TransientStringAttribute() {
		super();
		setVisibility(Settable.NONE);
	}

	/**
	 * Construct an attribute in the specified workspace with an empty string as
	 * a name. The object is added to the directory of the workspace. Increment
	 * the version number of the workspace.
	 * 
	 * @param workspace
	 *            The workspace that will list the attribute.
	 */
	public TransientStringAttribute(Workspace workspace) {
		super(workspace);
		setVisibility(Settable.NONE);
	}

	/**
	 * Construct an attribute with the given name contained by the specified
	 * container. The container argument must not be null, or a
	 * NullPointerException will be thrown. This attribute will use the
	 * workspace of the container for synchronization and version counts. If the
	 * name argument is null, then the name is set to the empty string. The
	 * object is added to the directory of the workspace if the container is
	 * null. Increment the version of the workspace.
	 * 
	 * @param container
	 *            The container.
	 * @param name
	 *            The name of this attribute.
	 * @exception IllegalActionException
	 *                If the attribute is not of an acceptable class for the
	 *                container, or if the name contains a period.
	 * @exception NameDuplicationException
	 *                If the name coincides with an attribute already in the
	 *                container.
	 */
	public TransientStringAttribute(NamedObj container, String name)
			throws IllegalActionException, NameDuplicationException {
		super(container, name);
		setVisibility(Settable.NONE);
	}

	/**
	 * Here we override the exportMoML method so this attribute and any children
	 * of this attribute are not included in the MoML.
	 */
	@Override
	public void exportMoML(Writer output, int depth, String name)
			throws IOException {
		// super.exportMoML(output, depth, name);
	}

}
