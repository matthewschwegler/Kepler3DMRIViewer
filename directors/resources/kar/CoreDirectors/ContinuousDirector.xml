<?xml version="1.0"?>
<property name="Continuous Director" class="org.kepler.moml.PropertyEntity">
  <property name="entityId"  value="urn:lsid:ptolemy.org:director:1:1" class="org.kepler.moml.NamedObjId"/>
  <property name="KeplerDocumentation" class="ptolemy.vergil.basic.KeplerDocumentationAttribute">
    <property name="description" class="ptolemy.kernel.util.ConfigurableAttribute">
      <configure>null</configure>
    </property>
    <property name="author" class="ptolemy.kernel.util.ConfigurableAttribute">
      <configure>Haiyang Zheng and Edward A. Lee, based on CTDirector by Jie Liu and Haiyang Zheng</configure>
    </property>
    <property name="version" class="ptolemy.kernel.util.ConfigurableAttribute">
      <configure>null</configure>
    </property>
    <property name="userLevelDocumentation" class="ptolemy.kernel.util.ConfigurableAttribute">
      <configure>
	The continuous time domain is a timed domain that supports
	continuous-time signals, discrete-event signals, and mixtures of the
	two. There is a global notion of time that all the actors are aware of.
	The semantics of this domain is given in the following two papers:
	<ul>
	  <li>
	    Edward A. Lee and Haiyang Zheng, "<a href="http://ptolemy.eecs.berkeley.edu/publications/papers/05/OperationalSemantics/#in_browser">Operational Semantics of Hybrid Systems</a>,"
	    Invited paper in Proceedings of Hybrid Systems: Computation and Control
	  (HSCC) LNCS 3414, Zurich, Switzerland, March 9-11, 2005.</li>
	  <li>
	    Edward A. Lee, Haiyang Zheng, "<a href="http://ptolemy.eecs.berkeley.edu/publications/papers/07/unifying/index.htm#in_browser">Leveraging Synchronous Language Principles for Heterogeneous Modeling and Design of Embedded Systems</a>,"
	  EMSOFT 07, September 30-October 3, 2007, Salzburg, Austria.</li>
	</ul>
	<p>
	  A signal is a set of "events," each of which has a tag and value.
	  The set of values includes a special element, called "absent", denoting
	  the absence of a (normal) value.
	  This director uses superdense time, where every event has a tag
	  that is a member of the set RxN.
	  R is a connected subset of the real numbers (giving "time",
	  and approximated by instances of the Time class),
	  and N is the natural numbers (giving an "index").
	  At a time <i>t</i>, a signal
	  may have multiple values in sequence with tags
	  (<i>t</i>, 0), (<i>t</i>, 1)... Its "initial value" is the value
	  at tag (<i>t</i>, 0). It typically settles to
	  a "final value" after a finite number of indices.
	  If it fails to settle to a final value, the signal is said to
	have a "stuttering Zeno" condition, and time will not progress.</p>
	<p>
	  In our semantics, all signals are piecewise continuous.
	  This means that the initial value, as a function of time,
	  is continuous on the left, the final value, as a function
	  of time, is continuous on the right, and the signal
	  has exactly one value (meaning the initial value and the final value
	  are the same) at all times except those
	on a discrete subset D.</p>
	<p>
	  A purely continuous signal has exactly one value at
	  all times, meaning that the final value equals the initial
	  value at all times.
	  A purely discrete signal has
	  initial value "absent" and final value "absent" at all
	  times, and at a discrete subset of the times, it may
	  have non-absent values. The only signal that is both
	  purely continuous and purely discrete is the one that
	is absent at all tags.</p>
	<p>
	  A signal may be mostly continuous,
	  but have multiple values at a discrete subset of times.
	  These multiple values semantically represent discontinuities
	in a continuous signal that is not purely continuous.</p>
	<p>
	  The set of times where signals have more than one distinct value
	  is a discrete subset D of the time line. These times are called
	  "breakpoints" and are treated specially in the execution.
	  Between these times, an ordinary differential equation (ODE)
	  solver governs the execution. Initial values are always given
	by the ODE solver.</p>
	<p>
	  The parameters of this director are:
	  <ul>
	    <li> <i>startTime</i>: The start time of the
	    execution. This parameter has no effect if
	    this director is not at the top-level of a model.</li>

	    <li> <i>stopTime</i>: The stop time of the execution.
	    When the current time reaches this value, postfire() will return false.
	    This will occur whether or not this director is at the top level.</li>

	    <li> <i>initStepSize</i>: The suggested integration step size.
	    If the ODE solver is a fixed step size solver, then this parameter
	    gives the step size taken. Otherwise, at the start of execution,
	    this provides the first guess for the integration step size.
	    In later iterations, the integrators provide the suggested step
	    size. This is a double with default value 0.1</li>

	    <li> <i>maxStepSize</i>: The maximum step size.
	    This can be used to prevent the solver from too few
	    samples of signals. That is, for certain models, it might
	    be possible to get accurate results for very large step
	    sizes, but plots of the signals may be misleading (even
	    if they are accurate) because they represent the signal
	    with only a few samples. The default value is 1.0.</li>

	    <li> <i>maxIterations</i>:
	    The maximum number of iterations that an
	    ODE solver can use to resolve the states of integrators.
	    Implicit solvers, for example, iterate until they converge,
	    and this parameter bounds the number of iterations.
	    An example of an implicit solver is the BackwardsEuler solver.
	    The default value is 20, and the type is int.
	    FIXME: Currently, this package implements no implicit solvers.</li>

	    <li> <i>ODESolver</i>:
	    The class name of the ODE solver used for integration.
	    This is a string that defaults to "ExplicitRK23Solver",
	    a solver that tends to deliver smooth renditions of signals.
	    The "ExplicitRK45Solver" may be more efficient in that it can
	    use larger step sizes, but the resulting signals when displayed
	    may be more jagged in appearance.
	    Solvers are all required to be in package
	    "ptolemy.domains.continuous.kernel.solver".
	    If there is another ContinuousDirector above this one
	    in the hierarchy, then the value of this parameter is ignored and the
	    solver given by the first ContinuousDirector above will be used.</li>

	    <li> <i>errorTolerance</i>: This is the local truncation
	    error tolerance, used for controlling the integration accuracy
	    in variable step size ODE solvers, and also for determining whether
	    unpredictable breakpoints have been accurately identified. Any actor
	    that implements ContinuousStepSizeControl may use this error
	    tolerance to determine whether the current step is accurate.
	    For example, if the local truncation error
	    in some integrator is greater than this tolerance, then the
	    integration step is considered to have failed, and should be restarted with
	    a reduced step size. The default value is 1e-4.</li>
	</ul></p>
	<p>
	  This director maintains a breakpoint table to record all predictable
	  breakpoints that are greater than or equal to
	  the current time. The breakpoints are sorted in chronological order.
	  Breakpoints at the same time are considered to be identical, and the
	  breakpoint table does not contain duplicate time points. A breakpoint can
	  be inserted into the table by calling the fireAt() method. The fireAt method
	  may be requested by the director, which inserts the stop time of the
	  execution. The fireAt method may also be requested by actors and the
	requested firing time will be inserted into the breakpoint table.</p>
	<p>
	  This director is designed to work with any other director that
	  implements the strict actor semantics. As long as the other director does
	  not commit state changes except in postfire(), that director
	  can be used within the model controlled by
	  this director. If, in addition to implementing the strict
	  actor semantics that other director also respects calls to
	  fireAt(), then this director may be used within a model
	governed by that director.</p>
	<p>
	  This director is based on the CTDirector by Jie Liu and Haiyang Zheng,
	but it has a much simpler scheduler and a fixed-point semantics.</p>
      </configure>
    </property>
    <property name="prop:errorTolerance" class="ptolemy.kernel.util.ConfigurableAttribute">
      <configure>Error tolerance for data values, used with variable step size solvers to determine whether the current step size is accurate. The default value is 1e-4, and the type is double.</configure>
    </property>
    <property name="prop:initStepSize" class="ptolemy.kernel.util.ConfigurableAttribute">
      <configure>User's hint for the initial integration step size. The default value is 0.1, and the type is double.
      </configure>
    </property>
    <property name="prop:iterations" class="ptolemy.kernel.util.ConfigurableAttribute">
      <configure>Specify the number of times a workflow is iterated. By default, this parameter is set to "0". Note that "0" does not mean "no iterations." Rather, "0" means that the workflow will iterate forever. Values greater than zero specify the actual number of times the director should execute the entire workflow. A value of 1, meaning that the director will run the workflow once, is often the best setting when building an SDF workflow. </configure>
    </property>
    <property name="prop:maxIterations" class="ptolemy.kernel.util.ConfigurableAttribute">
      <configure>The maximum number of rounds that an ODE solver can use to resolve the states of integrators. Many solvers, such as RK 2-3 and RK 4-5, use a fixed number of rounds (3 and 6, respectively). Implicit ODE solvers use however many rounds it takes to converge to a solution within a specified accuracy (given by <i>errorTolerance</i>). An example of an implicit solver is the BackwardsEuler solver. This parameter limits the number of rounds. The default value is 20, and the type is int.</configure>
    </property>
    <property name="prop:maxStepSize" class="ptolemy.kernel.util.ConfigurableAttribute">
      <configure>The maximum step size. The default value is 1.0, and the type is double.</configure>
    </property>
    <property name="prop:ODESolver" class="ptolemy.kernel.util.ConfigurableAttribute">
      <configure>The class name of the ODE solver used for integration. This is a string that defaults to "ExplicitRK23Solver". Solvers are all required to be in package "ptolemy.domains.continuous.kernel.solver".  If a solver is changed during execution, the change does not take effect until the next execution of the model. If there is another ContinuousDirector above this one in the hierarchy, separated possibly by MultiComposite, then the value of this parameter is ignored and the solver given by the other ContinuousDirector will be used.</configure>
    </property>
    <property name="prop:startTime" class="ptolemy.kernel.util.ConfigurableAttribute">
      <configure>Starting time of the execution. The default value is 0.0, and the type is double. This parameter has no effect if this director is used inside an enclosing ContinuousDirector and after the simulation starts.</configure>
    </property>
    <property name="prop:stopTime" class="ptolemy.kernel.util.ConfigurableAttribute">
      <configure>Stop time of the simulation. The default value is Infinity, and the type is double. This parameter has no effect after the simulation starts.</configure>
    </property>
    <property name="prop:synchronizeToRealTime" class="ptolemy.kernel.util.ConfigurableAttribute">
      <configure>Specify whether the execution should synchronize to real time or not. By default, the director does not synchronize to real time. If synchronize is selected, the director will only process the workflow when elapsed real time matches the product of the period parameter and the iteration count. Note: if the period parameter has a value of 0.0 (the default), then selecting this parameter has no effect. This is an advanced parameter that can usually be left at its default value.</configure>
    </property>
    <property name="prop:timeResolution" class="ptolemy.kernel.util.ConfigurableAttribute">
      <configure>The timeResolution parameter is  used to adjust the tradeoff between accuracy and speed. In general, one would not change this parameter unless a function is known to change substantially in times of less than the parameter's default value, 1E-10 sec. The parameter helps ensure that variable-step-size algorithms do not use unnecessarily small time steps that would result is long execution times. Reducing the parameter's value might produce more accurate results, but at a performance cost.</configure>
    </property>
  </property>
  <property name="class" value="ptolemy.domains.continuous.kernel.ContinuousDirector" class="ptolemy.kernel.util.StringAttribute">
    <property name="id" value="urn:lsid:ptolemy.org:directorclass:1:1" class="ptolemy.kernel.util.StringAttribute"/>
  </property>

  <property name="semanticType00" value="urn:lsid:localhost:onto:1:1#Director" class="org.kepler.sms.SemanticType"/>
  <property name="semanticType11" class="org.kepler.sms.SemanticType" value="urn:lsid:localhost:onto:2:1#Director"/>

</property>