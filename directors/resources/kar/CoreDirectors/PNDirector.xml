<?xml version="1.0"?>
<property name="PN Director" class="org.kepler.moml.PropertyEntity">
<property name="entityId"  value="urn:lsid:kepler-project.org:director:2:2" class="org.kepler.moml.NamedObjId"/>
<property name="KeplerDocumentation" class="ptolemy.vergil.basic.KeplerDocumentationAttribute">
<property name="description" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>null</configure></property>
<property name="author" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>Mudit Goel, Edward A. Lee, Xiaowen Xin</configure></property>
<property name="version" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>null</configure></property>
<property name="userLevelDocumentation" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>
<p>PN Directors are natural candidates for managing workflows that require parallel processing on distributed computing systems. PN workflows are powerful because they have few restrictions. On the other hand, they can be very inefficient.</p>

<p>The Process Network (PN) Director is similar to the SDF Director in that it does not have a notion of time. However, unlike the SDF Director, the PN Director does not statically calculate firing schedules. Instead, a PN workflow is driven by data availability: tokens are created on output ports whenever input tokens are available and the outputs can be calculated. Output tokens are passed to connected actors, where they are held in a buffer until that next actor collects all required inputs and can fire. The PN Director finishes executing a workflow only when there are no new data token sources anywhere in the workflow. </p>

<p>The same execution process that gives the PN Director its flexibility can also lead to some unexpected results: workflows may refuse to automatically terminate because tokens are always generated and available to downstream actors, for example. If one actor fires at a much higher rate than another, a downstream actor's memory buffer may overflow, causing workflow execution to fail.</p>

 <p>There are at least three ways for a PN model to terminate itself:
 <ol>
 <li>Have the model starve itself.  Typically, a boolean switch is used.
 See the PN OrderedMerge demo at
  <code>ptolemy/domains/pn/demo/OrderedMerge/OrderedMerge.xml</code></li>

 <li>Have the model call the Stop actor.  See the PN RemoveNilTokens demo at
  <code>ptolemy/domains/pn/demo/RemoveNilTokens/RemoveNilTokens.xml</code></li>

 <li>Set the <i>firingCountLimit</i> actor
 parameter to the number of iterations desired.  Actors such as Ramp
 extend LimitedFiringSource and have the <i>firingCountLimit</i> parameter.</li>
 </ol></p>
</configure></property>
<property name="prop:initialQueueCapacity" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>The initial size of the queues for each communication channel. The value is an integer that defaults to 1. This is an advanced parameter that can usually be left at its  default value.</configure></property>
<property name="prop:maximumQueueCapacity" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>The maximum size of the queues for each communication channel. The value is an integer that defaults to 65536. To specify unbounded queues, set the value to 0. This is an advanced parameter that can usually be left at its  default value.</configure></property>
</property>
<property name="class" value="ptolemy.domains.pn.kernel.PNDirector" class="ptolemy.kernel.util.StringAttribute">
  <property name="id" value="urn:lsid:kepler-project.org:directorclass:2:2" class="ptolemy.kernel.util.StringAttribute"/>
</property>
<property name="semanticType00" value="urn:lsid:localhost:onto:1:1#Director" class="org.kepler.sms.SemanticType"/>
<property name="semanticType11" class="org.kepler.sms.SemanticType" value="urn:lsid:localhost:onto:2:1#Director"/>

<property name="timeResolution" class="ptolemy.actor.parameters.SharedParameter" value="1E-10">
</property>

</property>