/* Allows displaying messages within MultipleTabDisplay actor
 * 
 * Copyright (c) 2010 FP7 EU EUFORIA (211804) & POZNAN SUPERCOMPUTING AND
 * NETWORKING CENTER All rights reserved.
 *
 * Permission is hereby granted, without written agreement and without license
 * or royalty fees, to use, copy, modify, and distribute this software and its
 * documentation for any purpose, provided that the above copyright notice and
 * the following two paragraphs appear in all copies of this software.
 *
 * IN NO EVENT SHALL THE FP7 EU EUFORIA (211804) & POZNAN SUPERCOMPUTING AND
 * NETWORKING CENTER BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL,
 * INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OF THIS SOFTWARE
 * AND ITS DOCUMENTATION, EVEN IF THE FP7 EU EUFORIA (211804) & POZNAN
 * SUPERCOMPUTING AND NETWORKING CENTER HAS BEEN ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * THE FP7 EU EUFORIA (211804) & POZNAN SUPERCOMPUTING AND NETWORKING CENTER
 * SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 * THE SOFTWARE PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE FP7 EU
 * EUFORIA (211804) & POZNAN SUPERCOMPUTING AND NETWORKING CENTER HAS NO
 * OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR
 * MODIFICATIONS.
 *
 */

package pl.psnc.kepler.common.actor;

import java.awt.Container;

import ptolemy.actor.TypedIOPort;
import ptolemy.actor.gui.Placeable;
import ptolemy.actor.injection.PtolemyInjector;
import ptolemy.actor.lib.LimitedFiringSource;
import ptolemy.data.BooleanToken;
import ptolemy.data.IntToken;
import ptolemy.data.StringToken;
import ptolemy.data.Token;
import ptolemy.data.expr.Parameter;
import ptolemy.data.type.BaseType;
import ptolemy.kernel.CompositeEntity;
import ptolemy.kernel.util.IllegalActionException;
import ptolemy.kernel.util.NameDuplicationException;

////////////////////////////////////////////////////////////////////////////////
// MultipleTabDisplay
/**
 * <p>
 * Displays the values of the tokens arriving on the input channels in a text
 * area on the screen. This actor is based on a concept of Display actor but it
 * treats inputs different way. Each time input is connected, actors send it to
 * the tab specified through displayName parameter.
 * </p>
 * 
 * <p>
 * Multiple Tab Display actors have following advantages:
 * </p>
 * 
 * <ul>
 * <li>it allows sending message to the same tab from different Multiple Tab
 * Display instances</li>
 * <li>it allows sending message to multiple tabs from the single Multiple Tab
 * Display instance</li>
 * <li>it allows sending messages from different levels of workflow (in terms of
 * composite actors) into single tab display</li>
 * <li>it allows to trigger other actors with boolean value (it produces boolean
 * value at output port)</li>
 * </ul>
 * 
 * <p>
 * You can find demo workflow related to this actor at following address:
 * </p>
 * <p>
 * <b>https://code.kepler-project.org/code/kepler/trunk/modules/outreach/
 * workflows/demos/MultipleTabDisplay</b>
 * </p>
 * <p>
 * Each tab generated by Multiple Tab Display have unique name that allows
 * sending multiple messages to the same tab during workflow execution
 * </p>
 * 
 * Actor accepts:
 * 
 * <p>
 * Input ports <it>text</it> - text to be shown within Tab
 * </p>
 * <p>
 * Output ports <it>output</it> - Boolean Token with true value for each
 * connected sink
 * </p>
 * <p>
 * Parameter <it>displayName</it> - Tab to be used when displaying the text
 * </p>
 * <p>
 * Parameter <it>addNewLine</it> - Determines whether newLine character should
 * be added with each new line
 * </p>
 * 
 * @author Tomasz Zok - tzok [at] man.poznan.pl
 * @author Michal Owsiak - michalo [at] man.poznan.pl (PSNC-EU Euforia project)
 * @version $Id:$
 * @see KAR:MultipleTabDisplay.kar
 * 
 */
public class MultipleTabDisplay extends LimitedFiringSource implements
        Placeable {
    // /////////////////////////////////////////////////////////////////////////
    // public variables
    /** Revision value used for getting current class revision. */
    public static final String REVISION = "$Revision: 2373 $";

    // /////////////////////////////////////////////////////////////////////////
    // ports and parameters
    /** Input port - text to be shown within Multiple Tab Display. */
    public TypedIOPort text;
    /**
     * Parameter - tab name to be used while showing the text. If tab doesn't
     * exist yet it will be created.
     */
    public Parameter displayNamePort;
    /**
     * Parameter - determines whether Multiple Tab Display should add new line
     * before message is printed into Multiple Tab Display tab.
     */
    public Parameter addNewLine;

    // /////////////////////////////////////////////////////////////////////////
    // constructors
    /**
     * Construct an actor with the given container and name.
     * 
     * @param container
     *            The container.
     * @param name
     *            The name of this actor.
     * @exception IllegalActionException
     *                If the actor cannot be contained by the proposed
     *                container.
     * @exception NameDuplicationException
     *                If the container already has an actor with this name.
     */
    public MultipleTabDisplay(CompositeEntity container, String name)
            throws NameDuplicationException, IllegalActionException {
        super(container, name);

        // create input port
        text = new TypedIOPort(this, "input", true, false);
        text.setMultiport(true);
        text.setTypeEquals(BaseType.GENERAL);

        // create parameter port that contains target display name within
        // Multiple Tab Display
        displayNamePort = new Parameter(this, "displayName", new IntToken(0));
        displayNamePort.setTypeEquals(BaseType.GENERAL);
        displayNamePort.setExpression("\"defaultDisplay\"");

        addNewLine = new Parameter(this, "addNewLines");
        addNewLine.setTypeEquals(BaseType.BOOLEAN);
        addNewLine.setExpression("true");

        output.setTypeEquals(BaseType.BOOLEAN);

        _attachText("_iconDescription", "<svg>\n"
                + "<rect x=\"-20\" y=\"-15\" width=\"40\" "
                + "height=\"30\" style=\"fill:lightGrey\"/>\n"
                + "<rect x=\"-15\" y=\"-10\" width=\"30\" "
                + "height=\"20\" style=\"fill:white\"/>\n"
                + "<line x1=\"-13\" y1=\"-6\" x2=\"-4\" y2=\"-6\" "
                + "style=\"stroke:grey\"/>\n"
                + "<line x1=\"-13\" y1=\"-2\" x2=\"0\" y2=\"-2\" "
                + "style=\"stroke:grey\"/>\n"
                + "<line x1=\"-13\" y1=\"2\" x2=\"-8\" y2=\"2\" "
                + "style=\"stroke:grey\"/>\n"
                + "<line x1=\"-13\" y1=\"6\" x2=\"4\" y2=\"6\" "
                + "style=\"stroke:grey\"/>\n" + "</svg>\n");
    }

    // /////////////////////////////////////////////////////////////////
    // // public methods ////
    /**
     * Display text within Multiple Tab Display dialog
     */
    @Override
    public void fire() throws IllegalActionException {
        super.fire();

        boolean isAddNewLines = ((BooleanToken) addNewLine.getToken())
                .booleanValue();

        for (int i = 0; i < text.getWidth(); i++)
            if (text.hasToken(i)) {
                // retrieve text and display name
                StringToken displayNameToken = (StringToken) displayNamePort
                        .getToken();

                // if there are no display names specified, we can only
                // sent error message into debug window
                if (displayNameToken == null
                        || displayNameToken.isNil() == true
                        || displayNameToken.stringValue() == null) {
                    _debug("Display name is not set or is set to false");
                    continue;
                }
                // now, we have to split displays - in order to make it
                // possible to send single message to multiple displays
                String[] displayNames = displayNameToken.stringValue().split(
                        ",");
                for (int p = 0; p < displayNames.length; p++)
                    displayNames[p] = displayNames[p].trim();

                // ... and show text within specified display
                Token textToken = text.get(i);
                String content = textToken.toString();
                if (textToken instanceof StringToken)
                    content = ((StringToken) textToken).stringValue();

                for (String displayName : displayNames) {
                    getImplementation().display(displayName, content,
                            isAddNewLines);
                }
            }

        // in case anybody listens to the port, produce true value
        if (output.numberOfSinks() != 0)
            for (int i = 0; i < output.numberOfSinks(); i++)
                output.send(i, new BooleanToken(true));
    }

    @Override
    public void initialize() throws IllegalActionException {
        super.initialize();
        getImplementation().prepare();
    }

    @Override
    public void place(Container container) {
        getImplementation().place(container);
    }

    // /////////////////////////////////////////////////////////////////////////
    // private methods
    private MultipleTabDisplayInterface getImplementation() {
        if (implementation == null) {
            implementation = PtolemyInjector.getInjector().getInstance(
                    MultipleTabDisplayInterface.class);
            implementation.initialize(this);
        }
        return implementation;
    }

    // /////////////////////////////////////////////////////////////////////////
    // private variables
    private static final long serialVersionUID = 1L;
    private MultipleTabDisplayInterface implementation;
}
