<?xml version="1.0"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="HttpActor" class="ptolemy.kernel.ComponentEntity">
<property name="entityId"  value="urn:lsid:kepler-project.org:actor:752:1" class="org.kepler.moml.NamedObjId"/>
<property name="class" value="org.ptolemy.ptango.lib.HttpActor" class="ptolemy.kernel.util.StringAttribute">
  <property name="id" value="null" class="ptolemy.kernel.util.StringAttribute"/>
</property>
<property name="semanticType00" class="org.kepler.sms.SemanticType" value="urn:lsid:localhost:onto:2:1#WebServer"/>

<property name="KeplerDocumentation" class="ptolemy.vergil.basic.KeplerDocumentationAttribute">
<property name="description" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>null</configure></property>
<property name="author" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>Elizabeth Latronico and Edward A. Lee</configure></property>
<property name="version" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>$Id: HttpActor.xml 32574 2014-01-31 01:12:41Z crawl $</configure></property>
<property name="userLevelDocumentation" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>&#10;An actor that handles an HTTP request by producing output&#10;  and waiting for an input that provides a response.&#10;  This actor requires that the model that contains it includes an&#10;  instance of {@link WebServer}, which discovers this actor and&#10;  delegates HTTP requests to a servlet that this actor creates.&#10;  It also requires that the model containing this actor provide&#10;  exactly one input to either the {@link #response} or {@link #setCookies}&#10;  input port (or both) in response to every output request,&#10;  and that such responses are delivered in the same order as&#10;  the requests they are responding to.&#10;  &lt;p&gt;&#10;  The &lt;i&gt;path&lt;/i&gt; parameter specifies which HTTP requests will&#10;  be delegated to this actor. If the base URL for the web server&#10;  is &quot;http://localhost:8080&quot;, say, then request of the form&#10;  &quot;http://localhost:8080/&lt;i&gt;path&lt;/i&gt;&quot; will be delegated to this&#10;  actor.&#10;  &lt;p&gt;&#10;  When this actor receives an HTTP request from the WebServer, it&#10;  issues a request for the director to fire it at the greater of&#10;  the current time of the director or the time elapsed since&#10;  the last invocation of initialize() (in seconds).&#10;  When the actor fires, it produces on its output ports the details&#10;  of the request, time stamped by the elapsed time since the model&#10;  started executing. It expects to be in a model that will send&#10;  it data to either the {@link #response} or {@link #setCookies}&#10;  input port (or both) with the response to HTTP request.&#10;  If that response does not arrive within &lt;i&gt;timeout&lt;/i&gt;&#10;  (default 30000) milliseconds, then this actor will a issue&#10;  timeout response and will discard the response when it eventually&#10;  arrives.&#10;  &lt;p&gt;&#10;  This actor is designed to be used in a DE model (with a DEDirector).&#10;  Since a model using this actor must deliver a response for&#10;  every request, the model must put this actor in a feedback&#10;  loop. The requests appear on the outputs of this actor,&#10;  and the responses appear on the inputs. Each such feedback&#10;  loop is required to include an instance of {@link MicrostepDelay}&#10;  (or {@link TimeDelay}, if you wish to model response times) in order&#10;  to break the causality loop that the feedback loop would&#10;  otherwise incur.&#10;  The downstream model should be used to construct a response.&#10;  For example, to simply serve a web page, put a&#10;  {@link FileReader} actor to read the response from a local&#10;  file and a {@link MicrostepDelay} downstream in a feedback&#10;  loop connected back to the response input.</configure></property>
<property name="port:getParameters" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>An output port that sends parameters included in a get request.  These are values appended to the URL in the form  of ...?name=value. The output will be a record with  one field for each name. If the request assigns multiple  values to the same name, then the field value of the record  will be an array of strings. Otherwise, it will simply  be a string.</configure></property>
<property name="port:response" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>An input port on which to provide the  response to issue to an HTTP request. When this input port  receives an event, if there is a pending get or post request from  a web server, then that pending request responds with the  value of the input. Otherwise, the response is recorded,  and the next get or post request received will be given the response.  For convenience, this is a multiport, and a response can be  provided on input channel. If multiple responses are provided,  the last one will prevail.</configure></property>
<property name="port:getRequestURI" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>An output port that sends the relative URI of a get request,  which must match the pattern given by the &lt;i&gt;path&lt;/i&gt; parameter.  This has type string.</configure></property>
<property name="port:postCookies" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>An output that sends the cookies specified by the  {@link #requestedCookies} parameter, with values  provided by a post request. If the post request does  have cookies with names matching those in requestedCookies,  then those values will be empty strings.  The output will be a RecordToken with the field names given by  requestedCookies, and the field values being strings.</configure></property>
<property name="port:postParameters" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>An output port that sends parameters included in a post request.  The output will be a record with  one field for each name. If the request assigns multiple  values to the name, then the field value of the record  will be an array of strings. Otherwise, it will simply  be a string.</configure></property>
<property name="port:setCookies" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>An input on which to provide new cookies and/or new cookie values.  These will be set in the HttpResponse received on the {@link #response}  input in the same firing, or if there is no token on the response  input, will be treated as cookies accompanying an empty string response.  This has type record.</configure></property>
<property name="port:postRequestURI" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>An output port that sends the relative URI of a post request,  which must match the pattern given by the &lt;i&gt;path&lt;/i&gt; parameter.  This has type string.</configure></property>
<property name="port:getCookies" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>An output that sends the cookies specified by the  {@link #requestedCookies} parameter, with values  provided by a get request. If the get request does  have cookies with names matching those in requestedCookies,  then those values will be empty strings.  The output will be a RecordToken with the field names given by  requestedCookies, and the field values being strings.</configure></property>
<property name="prop:requestedCookies" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>An array of names of cookies that this actor should retrieve from  an HTTP request and produce on the getCookies and putCookies output  ports. This is an array of strings that defaults to an empty array.</configure></property>
<property name="prop:timeout" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>The time in milliseconds to wait after producing the details  of a request on the output ports for a response to appear at  the input ports. This is a long that defaults to 30,000.  If this time expires before an input is received, then this actor  will issue a generic timeout response to the HTTP request.</configure></property>
<property name="prop:path" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>The relative URL of HTTP requests that this actor handles.  This is a string that defaults to &quot;/*&quot;, meaning that all  requests are handled, unless there is another instance  of the actor with a more specific path that matches.  Preference is given to longer paths. So, for example,  a request &quot;http://localhost:8080/foo/bar&quot; will be  delegated to an actor with &lt;i&gt;path&lt;/i&gt; = &quot;/foo/bar/*&quot;,  if there is one, and otherwise to an actor with  &lt;i&gt;path&lt;/i&gt; = &quot;/foo/*&quot;, if there is one, and finally  to an actor with &lt;i&gt;path&lt;/i&gt; = &quot;/*&quot;, if the first two  don't exist.  If two actors specify the same path,  then it is undefined which one gets the request.</configure></property>
</property></entity>
