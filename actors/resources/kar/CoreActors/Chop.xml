<?xml version="1.0"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="Chop" class="ptolemy.kernel.ComponentEntity">
<property name="entityId"  value="urn:lsid:kepler-project.org:actor:731:1" class="org.kepler.moml.NamedObjId"/>
<property name="class" value="ptolemy.domains.sdf.lib.Chop" class="ptolemy.kernel.util.StringAttribute">
  <property name="id" value="null" class="ptolemy.kernel.util.StringAttribute"/>
</property>

<property name="numberToRead" class="ptolemy.data.expr.Parameter" value="128">
</property>

<property name="numberToWrite" class="ptolemy.data.expr.Parameter" value="64">
</property>

<property name="offset" class="ptolemy.data.expr.Parameter" value="0">
</property>

<property name="usePastInputs" class="ptolemy.data.expr.Parameter" value="true">
</property>

<property name="semanticType00" class="org.kepler.sms.SemanticType" value="urn:lsid:localhost:onto:2:1#WorkflowControl">
</property>

<property name="kepler:input" class="org.kepler.moml.PortAttribute">
  <property name="direction" value="input" class="ptolemy.kernel.util.StringAttribute"/>
  <property name="dataType" value="unknown" class="ptolemy.kernel.util.StringAttribute"/>
  <property name="isMultiport" value="false" class="ptolemy.kernel.util.StringAttribute"/>
  </property>
<property name="kepler:output" class="org.kepler.moml.PortAttribute">
  <property name="direction" value="output" class="ptolemy.kernel.util.StringAttribute"/>
  <property name="dataType" value="unknown" class="ptolemy.kernel.util.StringAttribute"/>
  <property name="isMultiport" value="false" class="ptolemy.kernel.util.StringAttribute"/>
    </property>
<property name="KeplerDocumentation" class="ptolemy.vergil.basic.KeplerDocumentationAttribute">
<property name="description" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>null</configure></property>
<property name="author" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>Edward A. Lee</configure></property>
<property name="version" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>$Id: Chop.java 57040 2010-01-27 20:52:32Z cxh $</configure></property>
<property name="userLevelDocumentation" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>&#10;This actor reads a sequence of input tokens of any type, and writes a&#10; sequence of tokens constructed from the input sequence (possibly&#10; supplemented with zeros).  The number of input tokens consumed&#10; is given by &lt;i&gt;numberToRead&lt;/i&gt;, and the number of output tokens&#10; produced is given by &lt;i&gt;numberToWrite&lt;/i&gt;.&#10; The &lt;i&gt;offset&lt;/i&gt; parameter (default 0) specifies where in the output&#10; block the first (oldest) input that is read should go.&#10; If &lt;i&gt;offset&lt;/i&gt; is positive and &lt;i&gt;usePastInputs&lt;/i&gt; is true,&#10; then the first few outputs will come from values read in previous iterations.&#10; &lt;p&gt;&#10; A simple use of this actor is to pad a block of inputs with zeros.&#10; Set &lt;i&gt;offset&lt;/i&gt; to zero and use &lt;i&gt;numberToWrite &amp;gt; numberToRead&lt;/i&gt;.&#10; &lt;a name=&quot;zero padding&quot;&gt;&lt;/a&gt;&#10; &lt;a name=&quot;padding&quot;&gt;&lt;/a&gt;&lt;/p&gt;&#10; &lt;p&gt;&#10; Another simple use is to obtain overlapping windows from&#10; an input stream.&#10; Set &lt;i&gt;usePastInputs&lt;/i&gt; to true, use &lt;i&gt;numberToWrite &amp;gt; numberToRead&lt;/i&gt;,&#10; and set &lt;i&gt;offset&lt;/i&gt; equal to &lt;i&gt;numberToWrite - numberToRead&lt;/i&gt;.&#10; &lt;a name=&quot;overlapping windows&quot;&gt;&lt;/a&gt;&#10; &lt;a name=&quot;windowing&quot;&gt;&lt;/a&gt;&lt;/p&gt;&#10; &lt;p&gt;&#10; The general operation is illustrated with the following examples.&#10; If &lt;i&gt;offset&lt;/i&gt; is positive,&#10; there two possible scenarios, illustrated by the following examples:&lt;/p&gt;&#10; &lt;p&gt;&#10; &lt;pre&gt;&#10;     iiiiii                  numberToRead = 6&#10;      \    \                 offset = 2&#10;     ppiiiiii00              numberToWrite = 10&#10;&#10;     iiiiii                  numberToRead = 6&#10;      \ \  \                 offset = 2&#10;     ppiii                   numberToWrite = 5&#10; &lt;/pre&gt;&lt;/p&gt;&#10; &lt;p&gt;&#10; The symbol &quot;i&quot; refers to any input token. The leftmost symbol&#10; refers to the oldest input token of the ones consumed in a given&#10; firing. The symbol &quot;p&quot; refers to a token that is either zero&#10; (if &lt;i&gt;usePastInputs&lt;/i&gt; is false) or is equal to a previously&#10; consumed input token (if &lt;i&gt;usePastInputs&lt;/i&gt; is true).&#10; The symbol &quot;0&quot; refers to a zero-valued token.&#10; In the first of the above examples, the entire input block is&#10; copied to the output, and then filled out with zeros.&#10; In the second example, only a portion of the input block fits.&#10; The remaining input tokens are discarded, although they might&#10; be used in subsequent firings if &lt;i&gt;usePastInputs&lt;/i&gt; is true.&lt;/p&gt;&#10; &lt;p&gt;&#10; When the &lt;i&gt;offset&lt;/i&gt; is negative, this indicates that the&#10; first &lt;i&gt;offset&lt;/i&gt; input tokens that are read should be&#10; discarded.  The corresponding scenarios are shown below:&lt;/p&gt;&#10; &lt;p&gt;&#10; &lt;pre&gt;&#10;     iiiiii                  numberToRead = 6&#10;    / /  /                   offset = -2&#10;     iiii000000              numberToWrite = 10&#10;&#10;     iiiiii                  numberToRead = 6&#10;    / / //                   offset = -2&#10;     iii                     numberToWrite = 3&#10; &lt;/pre&gt;&#10;&lt;/p&gt;&#10; &lt;p&gt;&#10; In the first of these examples, the first two input tokens are&#10; discarded.  In the second example, the first two and the last input&#10; token are discarded.&lt;/p&gt;&#10; &lt;p&gt;&#10; The zero-valued tokens are constructed using the zero() method of&#10; the first input token that is read in the firing.  This returns&#10; a zero-valued token with the same type as the input.&lt;/p&gt;</configure></property>
<property name="port:output" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>The output port. By default, the type of this output is constrained  to be at least that of the input.</configure></property>
<property name="port:input" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>The input port.  This base class imposes no type constraints except  that the type of the input cannot be greater than the type of the  output.</configure></property>
<property name="prop:usePastInputs" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>If offset is greater than 0, specify whether to use previously   read inputs (otherwise use zeros).  This is a boolean, with default true.</configure></property>
<property name="prop:offset" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>Start of output block relative to start of input block.  This is an integer, with default 0.</configure></property>
<property name="prop:numberToWrite" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>The number of tokens to write to the output.  This is an integer, with default 64.</configure></property>
<property name="prop:numberToRead" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>The number of input tokens to read.  This is an integer, with default 128.</configure></property>
</property></entity>
