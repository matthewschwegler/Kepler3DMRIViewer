<?xml version="1.0"?>
<entity name="Iterate Over Array" class="org.kepler.moml.CompositeClassEntity">
<property name="entityId"  value="urn:lsid:kepler-project.org:actor:539:1" class="org.kepler.moml.NamedObjId"/>
<property name="class" value="ptolemy.actor.lib.hoc.IterateOverArray" class="ptolemy.kernel.util.StringAttribute">
  <property name="id" value="urn:lsid:kepler-project.org:class:539:1" class="ptolemy.kernel.util.StringAttribute"/>
</property>



<property name="semanticType00" class="org.kepler.sms.SemanticType" value="urn:lsid:localhost:onto:2:1#DataArrayOperation">
</property>

<property name="semanticType11" class="org.kepler.sms.SemanticType" value="urn:lsid:localhost:onto:2:1#WorkflowControl">
</property>

<property name="KeplerDocumentation" class="ptolemy.vergil.basic.KeplerDocumentationAttribute">
<property name="description" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>null</configure></property>
<property name="author" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>Edward A. Lee, Steve Neuendorffer</configure></property>
<property name="version" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>null</configure></property>
<property name="userLevelDocumentation" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>&#10;This actor iterates the contained actor or model over input arrays.&#10; To use it, either drop an actor on it and provide arrays to the inputs,&#10; or use a default configuration where the actor is effectively a&#10; composite actor. In the latter case,&#10; you can simply look inside and&#10; populate that actor with a submodel that will be applied to the&#10; array elements.  The submodel is required to have a director.&#10; An SDF director will&#10; often be sufficient for operations taken on array elements,&#10; but other directors can be used as well.&#10; Note that this inside director should not impose a limit&#10; on the number of iterations of the inside model. If it does,&#10; then that limit will be respected, which may result in a failure&#10; to iterate over all the input data.&#10; &lt;p&gt;&#10; Each input port expects an array. When this actor fires,&#10; an array is read on each input port that has one, and its&#10; contents are provided sequentially to the contained actor or model.&#10; This actor then iterates the contained actor or model until either&#10; there are no more input data for the actor or the prefire()&#10; method of the actor or model&#10; returns false. If postfire() of the actor returns false,&#10; then postfire() of this actor will return false, requesting&#10; a halt to execution of the model.  The outputs from the&#10; contained actor are collected into arrays that are&#10; produced on the outputs of this actor.&#10; &lt;p&gt;&#10; A special variable named &quot;iterationCount&quot; can be used in&#10; any expression setting the value of a parameter of this actor&#10; or its contents. This variable has an integer value that&#10; starts at 1 during the first iteration of the contained&#10; actor(s) and is incremented by 1 on each firing. If the&#10; inside actors consume one token on each firing, then&#10; its final value will be the size of the input array(s).&#10; &lt;p&gt;&#10; This actor is properly viewed as a &quot;higher-order component&quot; in&#10; that its contained actor is a parameter that specifies how to&#10; operate on input arrays.  It is inspired by the higher-order&#10; functions of functional languages, but unlike those, the&#10; contained actor need not be functional. That is, it can have&#10; state.&#10; &lt;p&gt;&#10; Note that you cannot place class definitions inside this&#10; actor. There should be no need to because class instances&#10; inside it can be instances of classes defined outside of it.&#10; &lt;p&gt;&#10; This actor (and many of the other higher-order components)&#10; has its intellectual roots in the higher-order functions&#10; of functional languages, which have been in use since&#10; the 1970s. Similar actors were implemented in Ptolemy&#10; Classic, and are described in Lee &amp; Parks, &quot;Dataflow&#10; Process Networks,&quot; &lt;i&gt;Proceedings of the IEEE&lt;/i&gt;, 1995.&#10; Those were inspired by [2].&#10; Alternative approaches are found dataflow visual programming&#10; since the beginning (Sutherland in the 1960s, Prograph and&#10; Labview in the 1980s), and in time-based visual languages&#10; (Simulink in the 1990s).&#10; &lt;p&gt;&#10; There are a number of known bugs or limitations in this&#10; implementation:&#10; &lt;ul&gt;&#10; &lt;li&gt;&#10; FIXME: When you drop in an actor, and then another actor,&#10; and then select &quot;undo,&quot; the second actor is deleted without&#10; the first one being re-created. Thus, undo is only a partial&#10; undo.  The fix to this is extremely complicated. Probably the&#10; only viable mechanism is to use UndoStackAttribute.getUndoInfo()&#10; to get the undo stack and then to manipulate the contents&#10; of that stack directly.&#10; &lt;li&gt;&#10; FIXME: There should be an option to reset between&#10; firings of the inside actor.&#10; &lt;li&gt; FIXME: If you drop a new actor onto an&#10; IterateOverArray in a subclass, it will replace the&#10; version inherited from the prototype. This is not right,&#10; since it violates the derivation invariant. Any attempt&#10; to modify the contained object in the prototype will trigger&#10; an exception.  There are two possible fixes. One is to&#10; relax the derivation invariant and allow derived objects&#10; to not perfectly mirror the hierarchy of the prototype.&#10; Another is for this class to somehow refuse to accept&#10; the new object in a subclass. But it is not obvious how&#10; to do this.&#10; &lt;li&gt;&#10; FIXME: If an instance of IterateOverArray in a derived class has&#10; overridden values of parameters, those are lost if contained&#10; entity of the instance in the base class is replaced and&#10; then an undo is requested.&#10; &lt;/ul&gt;&#10; &lt;p&gt;&lt;b&gt;References&lt;/b&gt;&#10; &lt;p&gt;&lt;ol&gt;&#10; &lt;li&gt; E. A. Lee and T. M. Parks, &quot;Dataflow Process Networks,&quot;&#10; Proceedings of the IEEE, 83(5): 773-801, May, 1995.&#10; &lt;li&gt; H. J. Reekie,&#10;&lt;a href=&quot;http://ptolemy.eecs.berkeley.edu/~johnr/papers/thesis.html#in_browser&quot;&gt;Realtime Signal Processing: Dataflow, Visual,&#10; and Functional Programming&lt;/a&gt;,&quot; Ph.D. Thesis,&#10; University of Technology, Sydney, Sydney, Australia, 1995.&#10; &lt;/ol&gt;</configure></property>
</property></entity>
