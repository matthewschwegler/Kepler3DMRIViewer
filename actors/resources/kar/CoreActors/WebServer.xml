<?xml version="1.0"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<property name="WebServer" class="org.kepler.moml.PropertyEntity">
<property name="entityId"  value="urn:lsid:kepler-project.org:actor:751:1" class="org.kepler.moml.NamedObjId"/>
<property name="class" value="org.ptolemy.ptango.lib.WebServer" class="ptolemy.kernel.util.StringAttribute">
  <property name="id" value="null" class="ptolemy.kernel.util.StringAttribute"/>
</property>
<property name="semanticType01" class="org.kepler.sms.SemanticType" value="urn:lsid:localhost:onto:2:1#WebServer"/>

<property name="KeplerDocumentation" class="ptolemy.vergil.basic.KeplerDocumentationAttribute">
<property name="description" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>null</configure></property>
<property name="author" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>Elizabeth Latronico and Edward A. Lee</configure></property>
<property name="version" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>$Id: WebServer.xml 32574 2014-01-31 01:12:41Z crawl $</configure></property>
<property name="userLevelDocumentation" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>&#10;An attribute that runs a Jetty web server and routes incoming&#10;  HTTP requests to objects in the model that implement&#10;  {@link HttpService}. The server is set up during&#10;  {@link #initialize()} and taken down during&#10;  {@link #wrapup()}.  The &lt;i&gt;resourceLocation&lt;/i&gt;&#10;  parameter gives a directory or URL relative to which this&#10;  web server should look for resources (like image files and&#10;  the like).&#10;  You can add additional resource bases by adding additional&#10;  parameters of type ptolemy.data.expr.FileParameter to&#10;  this WebServer (select Configure in the context menu).&#10;&#10;  &lt;p&gt;&lt;a href=&quot;http://wiki.eclipse.org/Jetty/Tutorial&quot;&gt;http://wiki.eclipse.org/Jetty/Tutorial&lt;/a&gt;&#10;  - The Jetty Tutorial&lt;/p&gt;</configure></property>
<property name="prop:applicationPath" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>The URL prefix to map this application to.  This defaults to &quot;/&quot;,  which will cause the model to receive all URLs directed to this  server. For example, if this WebServer is handling requests on  {@link #port} 8078 of localhost, then with value &quot;/&quot;, this  WebServer will handle all requests to  &lt;pre&gt;  http://localhost:8078/  &lt;/pre&gt;  Individual servlets (actors or attributes in a model that implement  {@link HttpService}) will be mapped to URLs relative to this context path.  For example, if the model contains a servlet with relative path &quot;myService&quot;,  then this WebServer will delegate to it requests of the form  &lt;pre&gt;  http://localhost:8078/myService  &lt;/pre&gt; &lt;p&gt; Other choices besides &quot;/&quot; are possible.  For example, for web applications, it's common to host several applications on the same server.  It's typical to have each application use setContextPath(&quot;/appName&quot;) here, (e.g. setContextPath(&quot;/myCalendarApp&quot;), setContextPath(&quot;/tetris&quot;) Each application can contain multiple servlets, which are registered to URLs relative to this path, e.g.: /myCalendarApp/view, /myCalendarApp/print, /tetris/view That way the separate applications have a separate URL namespaces and don't interfere with each other.  A web server often offers some default content at the root / then.  E.g. Tomcat provides the Tomcat manager screen to load/unload web applications.</configure></property>
<property name="prop:port" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>The port number to respond to. This is a integer that  defaults to 8078.</configure></property>
<property name="prop:temporaryFileLocation" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>A directory where the web server will look for resources  (like image files and the like). This specifies an additional  resource location after {@link #resourceLocation}, but the  directory specified here may be used by components implementing  {@link HttpService} as a place to write temporary files  that will be found by the web server.  This defaults to &quot;$TMPDIR&quot;, a built-in variable  that specifies a temporary file location.  See the explanation of {@link #resourcePath}.</configure></property>
<property name="prop:resourceLocation" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>A directory or URL where the web server will look for resources  (like image files and the like).  This defaults to the current model's directory.  You can add additional resource bases by adding additional  parameters of type ptolemy.data.expr.FileParameter to  this WebServer (select Configure in the context menu).  &lt;p&gt;  To refer to resources in these locations, a web service  (such as an HTML page) uses the {@link #resourcePath}.  See the explanation of {@link #resourcePath}.</configure></property>
<property name="prop:resourcePath" class="ptolemy.kernel.util.ConfigurableAttribute"><configure>The URL prefix used to request resources (files) from this web service.  For example, an HTML page requesting an image file.  The web server creates a ResourceHandler object to accept incoming HTTP  requests for files, such as images, and return those files.  The ResourceHandler is assigned a URL prefix, specified in resourcePath,  which clients use to submit requests to the ResourceHandler.  The resourcePath should be distinct from all other HttpActor paths in  the model.  Otherwise, the ResourceHandler will intercept requests  intended for an HttpActor.  Examples:  A file can be retrieved using an absolute URL or a relative URL.  Absolute URLs follow the pattern:  &lt;pre&gt;  protocol://hostname:portname/applicationPath/resourcePath/filename.ext  &lt;/pre&gt;  For example:  &lt;pre&gt;  http://localhost:8078/myAppName/files/PtolemyIcon.gif  &lt;/pre&gt;  for an {@link #applicationPath} of &quot;/myAppName&quot; and a resourcePath of &quot;/files&quot;  or  &lt;pre&gt;  http://localhost:8078/files/PtolemyIcon.gif  &lt;/pre&gt;  for an {@link #applicationPath} of &quot;/&quot; and a resourcePath of &quot;/files&quot;.  The resource may also be referenced by the relative URL  &lt;pre&gt;  /files/PtolemyIcon.gif  &lt;/pre&gt;  from within the application; e.g., a web page served by URL  &lt;pre&gt;  protocol://hostname:portname/applicationPath/  &lt;/pre&gt;  &lt;p&gt;  The ResourceHandler will look in resourceLocation for this file,  and if it does not find it there, will also look in any additional  resource locations that have been added to this web server  (see #resourceLocation).  &lt;/p&gt;  Note that ResourceHandler supports subdirectories, for example  http://localhost:8078/myAppName/files/img/PtolemyIcon.gif  and a resourceLocation of $PTII/org/ptolemy/ptango/demo  will tell the ResourceHandler to get the file at  $PTII/org/ptolemy/ptango/demo/img/PtolemyIcon.gif  The ResourceHandler can support multiple resourceLocations, in  which case they will be searched in the order of the parameters.  To added locations to search for files, just add parameters  that are instances of &quot;ptolemy.data.expr.FileParameter&quot; to  this WebServer.</configure></property>
</property></property>
